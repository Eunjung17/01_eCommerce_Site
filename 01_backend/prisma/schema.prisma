// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(uuid())
  email        String    @unique
  firstName    String
  lastName     String
  password     String
  address      String
  phone        String
  userRole     UserRole  @relation(fields: [userRoleId], references: [id])
  userRoleId   Int
  confirmAdmin Boolean
  taxId        String
  createdAt    DateTime
  isDeleted    Boolean
  orders       Order[]
  products     Product[]
  carts        Cart[]
  reviews      Review[]
}

model UserRole {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String?
  isDeleted   Boolean
  users       User[]
}

model Review {
  id            String      @id @default(uuid())
  createdAt     DateTime
  rating        Int
  review        String?
  orderDetail   OrderDetail @relation(fields: [orderDetailId], references: [id])
  orderDetailId String      @unique
  user          User        @relation(fields: [userId], references: [id])
  userId        String
  product       Product     @relation(fields: [productId], references: [id])
  productId     String
  image         String
  isDeleted     Boolean
}

model Product {
  id               String         @id @default(uuid())
  user             User           @relation(fields: [userId], references: [id])
  userId           String
  name             String
  categoryDetail   CategoryDetail @relation(fields: [categoryDetailId], references: [id])
  categoryDetailId String
  description      String?
  price            Int
  images           String?
  quantity         Int
  isDeleted        Boolean
  reviews          Review[]
  cartDetail       CartDetail[]
  orderDetail      OrderDetail[]
}

model CategoryDetail {
  id          String    @id @default(uuid())
  category    Category  @relation(fields: [categoryId], references: [id])
  categoryId  String
  name        String    @unique
  description String?
  isDeleted   Boolean
  product     Product[]
}

model Category {
  id             String           @id @default(uuid())
  name           String           @unique
  description    String?
  isDeleted      Boolean
  categoryDetail CategoryDetail[]
}

model Order {
  id              String        @id @default(uuid())
  user            User          @relation(fields: [userId], references: [id])
  userId          String
  createdAt       DateTime
  name            String
  address         String
  phone           String
  paymentMethod   PaymentMethod @relation(fields: [paymentMethodId], references: [id])
  paymentMethodId Int
  isDeleted       Boolean
  orderDetails    OrderDetail[]
}

model OrderDetail {
  id        String  @id @default(uuid())
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  price     Int
  isDeleted Boolean
  review    Review?
}

model PaymentMethod {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String?
  isDeleted   Boolean
  orders      Order[]
}

model Cart {
  id          String       @id @default(uuid())
  user        User         @relation(fields: [userId], references: [id])
  userId      String       @unique
  isDeleted   Boolean
  cartDetails CartDetail[]
}

model CartDetail {
  id        String  @id @default(uuid())
  cart      Cart    @relation(fields: [cartId], references: [id])
  cartId    String
  product   Product @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  price     Int 
  isDeleted Boolean

  @@unique([productId, cartId, isDeleted]) // Compound unique constraint
}
